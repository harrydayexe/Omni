// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package storage

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :exec
INSERT INTO comments (id, post_id, user_id, content, created_at) VALUES (?, ?, ?, ?, ?)
`

type CreateCommentParams struct {
	ID        int64     `json:"id"`
	PostID    int64     `json:"post_id"`
	UserID    int64     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.exec(ctx, q.createCommentStmt, createComment,
		arg.ID,
		arg.PostID,
		arg.UserID,
		arg.Content,
		arg.CreatedAt,
	)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCommentStmt, deleteComment, id)
	return err
}

const findCommentAndUserByID = `-- name: FindCommentAndUserByID :one
SELECT users.id, users.username, comments.id, comments.post_id, comments.user_id, comments.content, comments.created_at FROM comments 
INNER JOIN users 
ON comments.user_id = users.id 
WHERE comments.id = ?
`

type FindCommentAndUserByIDRow struct {
	ID       int64   `json:"id"`
	Username string  `json:"username"`
	Comment  Comment `json:"comment"`
}

func (q *Queries) FindCommentAndUserByID(ctx context.Context, id int64) (FindCommentAndUserByIDRow, error) {
	row := q.queryRow(ctx, q.findCommentAndUserByIDStmt, findCommentAndUserByID, id)
	var i FindCommentAndUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Comment.ID,
		&i.Comment.PostID,
		&i.Comment.UserID,
		&i.Comment.Content,
		&i.Comment.CreatedAt,
	)
	return i, err
}

const findCommentsAndUserByPostIDPaged = `-- name: FindCommentsAndUserByPostIDPaged :many
SELECT users.id, users.username, comments.id, comments.post_id, comments.user_id, comments.content, comments.created_at FROM comments 
INNER JOIN users 
ON comments.user_id = users.id 
WHERE comments.post_id = ? AND comments.created_at > ? 
ORDER BY comments.created_at ASC
LIMIT ?
`

type FindCommentsAndUserByPostIDPagedParams struct {
	PostID       int64     `json:"post_id"`
	CreatedAfter time.Time `json:"created_after"`
	Limit        int32     `json:"limit"`
}

type FindCommentsAndUserByPostIDPagedRow struct {
	ID       int64   `json:"id"`
	Username string  `json:"username"`
	Comment  Comment `json:"comment"`
}

func (q *Queries) FindCommentsAndUserByPostIDPaged(ctx context.Context, arg FindCommentsAndUserByPostIDPagedParams) ([]FindCommentsAndUserByPostIDPagedRow, error) {
	rows, err := q.query(ctx, q.findCommentsAndUserByPostIDPagedStmt, findCommentsAndUserByPostIDPaged, arg.PostID, arg.CreatedAfter, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCommentsAndUserByPostIDPagedRow
	for rows.Next() {
		var i FindCommentsAndUserByPostIDPagedRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Comment.ID,
			&i.Comment.PostID,
			&i.Comment.UserID,
			&i.Comment.Content,
			&i.Comment.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comments SET content=? WHERE id=?
`

type UpdateCommentParams struct {
	Content string `json:"content"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.exec(ctx, q.updateCommentStmt, updateComment, arg.Content, arg.ID)
	return err
}
