// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package storage

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCommentStmt, err = db.PrepareContext(ctx, createComment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateComment: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.findCommentAndUserByIDStmt, err = db.PrepareContext(ctx, findCommentAndUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindCommentAndUserByID: %w", err)
	}
	if q.findCommentsAndUserByPostIDPagedStmt, err = db.PrepareContext(ctx, findCommentsAndUserByPostIDPaged); err != nil {
		return nil, fmt.Errorf("error preparing query FindCommentsAndUserByPostIDPaged: %w", err)
	}
	if q.findPostByIDStmt, err = db.PrepareContext(ctx, findPostByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindPostByID: %w", err)
	}
	if q.getUserAndPostsByIDPagedStmt, err = db.PrepareContext(ctx, getUserAndPostsByIDPaged); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAndPostsByIDPaged: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.updateCommentStmt, err = db.PrepareContext(ctx, updateComment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateComment: %w", err)
	}
	if q.updatePostStmt, err = db.PrepareContext(ctx, updatePost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePost: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCommentStmt != nil {
		if cerr := q.createCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCommentStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.findCommentAndUserByIDStmt != nil {
		if cerr := q.findCommentAndUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findCommentAndUserByIDStmt: %w", cerr)
		}
	}
	if q.findCommentsAndUserByPostIDPagedStmt != nil {
		if cerr := q.findCommentsAndUserByPostIDPagedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findCommentsAndUserByPostIDPagedStmt: %w", cerr)
		}
	}
	if q.findPostByIDStmt != nil {
		if cerr := q.findPostByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPostByIDStmt: %w", cerr)
		}
	}
	if q.getUserAndPostsByIDPagedStmt != nil {
		if cerr := q.getUserAndPostsByIDPagedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAndPostsByIDPagedStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.updateCommentStmt != nil {
		if cerr := q.updateCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCommentStmt: %w", cerr)
		}
	}
	if q.updatePostStmt != nil {
		if cerr := q.updatePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	createCommentStmt                    *sql.Stmt
	createPostStmt                       *sql.Stmt
	createUserStmt                       *sql.Stmt
	deleteCommentStmt                    *sql.Stmt
	deletePostStmt                       *sql.Stmt
	deleteUserStmt                       *sql.Stmt
	findCommentAndUserByIDStmt           *sql.Stmt
	findCommentsAndUserByPostIDPagedStmt *sql.Stmt
	findPostByIDStmt                     *sql.Stmt
	getUserAndPostsByIDPagedStmt         *sql.Stmt
	getUserByIDStmt                      *sql.Stmt
	updateCommentStmt                    *sql.Stmt
	updatePostStmt                       *sql.Stmt
	updateUserStmt                       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		createCommentStmt:                    q.createCommentStmt,
		createPostStmt:                       q.createPostStmt,
		createUserStmt:                       q.createUserStmt,
		deleteCommentStmt:                    q.deleteCommentStmt,
		deletePostStmt:                       q.deletePostStmt,
		deleteUserStmt:                       q.deleteUserStmt,
		findCommentAndUserByIDStmt:           q.findCommentAndUserByIDStmt,
		findCommentsAndUserByPostIDPagedStmt: q.findCommentsAndUserByPostIDPagedStmt,
		findPostByIDStmt:                     q.findPostByIDStmt,
		getUserAndPostsByIDPagedStmt:         q.getUserAndPostsByIDPagedStmt,
		getUserByIDStmt:                      q.getUserByIDStmt,
		updateCommentStmt:                    q.updateCommentStmt,
		updatePostStmt:                       q.updatePostStmt,
		updateUserStmt:                       q.updateUserStmt,
	}
}
